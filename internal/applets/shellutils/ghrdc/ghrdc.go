//
// mimixbox/internal/applets/shellutils/ghrdc/ghrdc.go
//
// Copyright 2021 Naohiro CHIKAMATSU
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package ghrdc

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/jessevdk/go-flags"
	mb "github.com/nao1215/mimixbox/internal/lib"
)

const cmdName string = "ghrdc"

var osExit = os.Exit

const version = "1.0.1"

// Exit code
const (
	ExitSuccess int = iota // 0
	ExitFailuer
)

type options struct {
	All     bool `short:"a" long:"all" description:"Show total number of downloads per release"`
	Total   bool `short:"t" long:"total" description:"Show total number of downloads for all releases"`
	Version bool `short:"v" long:"version" description:"Show ghrdc command version"`
}

// GitHubReleaseData is a structure for receiving GitHub Release information in json format.
// The following structure was generated by JSON-to-GO.
// JSON-to-GO: https://mholt.github.io/json-to-go/
type GitHubReleaseData struct {
	URL       string `json:"url"`
	AssetsURL string `json:"assets_url"`
	UploadURL string `json:"upload_url"`
	HTMLURL   string `json:"html_url"`
	ID        int    `json:"id"`
	Author    struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		NodeID            string `json:"node_id"`
		AvatarURL         string `json:"avatar_url"`
		GravatarID        string `json:"gravatar_id"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"author"`
	NodeID          string    `json:"node_id"`
	TagName         string    `json:"tag_name"`
	TargetCommitish string    `json:"target_commitish"`
	Name            string    `json:"name"`
	Draft           bool      `json:"draft"`
	Prerelease      bool      `json:"prerelease"`
	CreatedAt       time.Time `json:"created_at"`
	PublishedAt     time.Time `json:"published_at"`
	Assets          []struct {
		URL      string      `json:"url"`
		ID       int         `json:"id"`
		NodeID   string      `json:"node_id"`
		Name     string      `json:"name"`
		Label    interface{} `json:"label"`
		Uploader struct {
			Login             string `json:"login"`
			ID                int    `json:"id"`
			NodeID            string `json:"node_id"`
			AvatarURL         string `json:"avatar_url"`
			GravatarID        string `json:"gravatar_id"`
			URL               string `json:"url"`
			HTMLURL           string `json:"html_url"`
			FollowersURL      string `json:"followers_url"`
			FollowingURL      string `json:"following_url"`
			GistsURL          string `json:"gists_url"`
			StarredURL        string `json:"starred_url"`
			SubscriptionsURL  string `json:"subscriptions_url"`
			OrganizationsURL  string `json:"organizations_url"`
			ReposURL          string `json:"repos_url"`
			EventsURL         string `json:"events_url"`
			ReceivedEventsURL string `json:"received_events_url"`
			Type              string `json:"type"`
			SiteAdmin         bool   `json:"site_admin"`
		} `json:"uploader"`
		ContentType        string    `json:"content_type"`
		State              string    `json:"state"`
		Size               int       `json:"size"`
		DownloadCount      int       `json:"download_count"`
		CreatedAt          time.Time `json:"created_at"`
		UpdatedAt          time.Time `json:"updated_at"`
		BrowserDownloadURL string    `json:"browser_download_url"`
	} `json:"assets"`
	TarballURL string `json:"tarball_url"`
	ZipballURL string `json:"zipball_url"`
	Body       string `json:"body"`
}

func Run() (int, error) {
	var opts options
	var args = parseArgs(&opts)
	var repository string = args[0]
	data, err := fetchGitHubReleaseData(repository)
	if err != nil {
		return ExitFailuer, err
	}
	if len(data) == 0 {
		// Because the ghrdc command does not authenticate with GitHub API,
		// there are restrictions on the results that can be obtained.
		// There is the method to use the following library for API authentication.
		// (However, no plans to add functions).
		// URL: https://github.com/google/go-github
		err := fmt.Errorf("Release Data is nothing. If %s is organization repository,\n"+
			"gdrdc commant can't get release data.\n", repository)
		return ExitFailuer, err
	}

	var totalSrcCnt int = 0
	var totalBinCnt int = 0
	for i, d := range data {
		srcCnt, binCnt := calcTotalDownloadCount(d)
		totalSrcCnt += srcCnt
		totalBinCnt += binCnt

		if !opts.Total {
			fmt.Printf("[Name(Version)]             :%s\n", d.Name)
			fmt.Printf("[Release Date]              :%s\n", d.PublishedAt)
			fmt.Printf("[Binary Download Count]     :%d\n", binCnt)
			fmt.Printf("[Source Code Download Count]:%d\n", srcCnt)
		}
		// In the default case, the latest result is displayed.
		if !opts.All && !opts.Total {
			break
		}

		// Adjust line feed between results. If last result, not add line feed.
		if (i+1) != len(data) && !opts.Total {
			fmt.Println("")
		}
	}

	if opts.Total {
		fmt.Printf("[Name(Version)]                    :All release\n")
		fmt.Printf("[Release Date]                     :-\n")
		fmt.Printf("[Binary Download Count(total)]     :%d\n", totalBinCnt)
		fmt.Printf("[Source Code Download Count(total)]:%d\n", totalSrcCnt)
	}

	return ExitSuccess, nil
}

// fetchGitHubReleaseData () runs the GitHub Web API. Convert the acquired json to a structure.
func fetchGitHubReleaseData(repositoryName string) ([]GitHubReleaseData, error) {
	repository := "https://api.github.com/repos/" + repositoryName + "/releases"

	resp, err := http.Get(repository)
	if err != nil {
		fmt.Println("Can't get response from GitHub.")
		return nil, err
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Can't read response from GitHub.")
		return nil, err
	}

	var data []GitHubReleaseData
	if err := json.Unmarshal(body, &data); err != nil {
		fmt.Println("Can't convert json to structure data. Is the repository name correct?")
		return nil, err
	}
	return data, nil
}

// calcTotalDownloadCount() Calculate the number of downloads (total value) of executable
// files and source code.
func calcTotalDownloadCount(ghrd GitHubReleaseData) (int, int) {
	var srcCnt int = 0
	var binCnt int = 0
	for _, asset := range ghrd.Assets {
		if isSourceCodeFileURL(asset.BrowserDownloadURL) {
			srcCnt += asset.DownloadCount
		} else {
			binCnt += asset.DownloadCount
		}
	}
	return srcCnt, binCnt
}

// isSourceCodeFileURL() parses the URL and guesses if the target file(URL) is source code.
func isSourceCodeFileURL(str string) bool {
	likelySrcCode := []string{"src", "Src", "SRC", "source", "Source"}

	for _, target := range likelySrcCode {
		if strings.Contains(str, target) {
			return true
		}
	}
	return false
}

func parseArgs(opts *options) []string {
	p := initParser(opts)

	args, err := p.Parse()
	if err != nil {
		osExit(ExitFailuer)
	}

	if opts.Version {
		mb.ShowVersion(cmdName, version)
		osExit(ExitSuccess)
	}

	if !isValidArgNr(args) {
		showHelp(p)
		osExit(ExitFailuer)
	}
	return args
}

func initParser(opts *options) *flags.Parser {
	parser := flags.NewParser(opts, flags.Default)
	parser.Name = cmdName
	parser.Usage = "[OPTIONS] USER_NAME/RPOSITORY_NAME"

	return parser
}

func isValidArgNr(args []string) bool {
	return len(args) == 1
}

func showHelp(p *flags.Parser) {
	fmt.Printf("ghrdc command shows the number of release file downloads in the repository using GitHub API.\n\n")
	p.WriteHelp(os.Stdout)
}
